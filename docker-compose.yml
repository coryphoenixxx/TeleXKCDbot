services:

  api:
    container_name: app.api
    profiles:
      - core
    extends:
      file: common.yaml
      service: config
    volumes:
      - ./data:/app/data:rw
    command: uv run api
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      worker:
        condition: service_started
    restart: unless-stopped
    networks:
      - backend
  #    healthcheck:
  #      test: curl -fsSL http://localhost:8000/api/healthcheck
  #      interval: 10s
  #      timeout: 60s
  #      retries: 5
  #      start_period: 10s


  tg_bot:
    container_name: app.tg_bot
    profiles:
      - core
    extends:
      file: common.yaml
      service: config
    command: uv run tg_bot
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - backend


  prepopulation:
    container_name: app.prepopulation
    profiles:
      - prepopulation
    extends:
      file: common.yaml
      service: config
    volumes:
      - ./data:/app/data:rw
    command: bash -c "uv run cli scrape_and_upload_original --end 60 &&
                      uv run cli scrape_and_upload_translations &&
                      uv run cli extract_and_upload_prescraped_translations"
    tty: true
    depends_on:
      postgres:
        condition: service_healthy
      nats:
        condition: service_started
    restart: no
    networks:
      - backend


  worker:
    profiles:
      - core
    extends:
      file: common.yaml
      service: config
    volumes:
      - ./data:/app/data:rw
    command: uv run faststream run --factory backend.main.worker:create_app --log-level error
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - backend
    deploy:
      mode: replicated
      replicas: 2


  migrations:
    container_name: app.migrations
    profiles:
      - migrations
    extends:
      file: common.yaml
      service: config
    command: uv run alembic upgrade head
    depends_on:
      postgres:
        condition: service_healthy
    restart: on-failure
    networks:
      - backend


  postgres:
    container_name: app.postgres
    profiles:
      - core
      - migrations
      - prepopulation
    image: groonga/pgroonga:3.2.2-alpine-16
    #    command: -c config_file=/etc/postgresql.conf
    command:
      - "postgres"
      - "-c"
      - "max_connections=200"
    environment:
      POSTGRES_USER: "admin"
      POSTGRES_PASSWORD: "password"
      POSTGRES_DB: "appdb"
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      #      - ./.configs/postgresql.conf:/etc/postgresql.conf
      - pg-data:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U admin -d appdb
      interval: 5s
      timeout: 60s
      retries: 10
      start_period: 5s
    restart: unless-stopped
    networks:
      - backend


  nats:
    container_name: app.nats
    profiles:
      - core
      - prepopulation
    image: nats:2.10.20
    restart: unless-stopped
    ports:
      - "4222:4222"
    command: '-js'
    networks:
      - backend


volumes:
  pg-data: { }
  tmp-dir: { }
  static-dir: { }

networks:
  backend:
    driver: bridge
    name: backend
