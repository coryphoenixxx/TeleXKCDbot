version: '3.9'

x-logging: &loki-logging
  driver: json-file
  options:
    tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

services:

  bot:
    container_name: telexkcdbot-bot
    build: ./src/bot
    ports:
      - ${BOT_PORT}:${BOT_PORT}
    depends_on:
      db:
        condition: service_healthy
      api:
        condition: service_started
    env_file:
      - .env
    restart: unless-stopped
    networks:
      - loki
    logging: *loki-logging

  api:
    container_name: telexkcdbot-api
    build: ./src/api
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    ports:
      - ${API_PORT}:${API_PORT}
    healthcheck:
      test: curl -f http://api:{API_PORT} || exit 1
      interval: 1s
      timeout: 1s
      start_period: 10s
      retries: 10
    restart: unless-stopped
    networks:
      - loki
    logging: *loki-logging

  db:
    container_name: telexkcdbot-postgres
    image: onjin/alpine-postgres:13.0
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - .:/var/lib/postgresql/data
      - ./postgresql.conf:/var/lib/postgresql/data/postgresql.conf
    ports:
      - ${DB_PORT}:${DB_PORT}
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}
      interval: 1s
      timeout: 1s
      start_period: 10s
      retries: 10
    restart: unless-stopped

    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1GB
    networks:
      - loki
    logging: *loki-logging

  loki:
    image: grafana/loki:2.2.1
    ports:
      - "3100"
    volumes:
      - ./config/loki/loki-config.yaml:/mnt/config/loki-config.yaml
    command: -config.file=/mnt/config/loki-config.yaml
    networks:
      - loki
    logging: *loki-logging

  promtail:
    image: grafana/promtail:2.2.1
    volumes:
      - ./config/loki/promtail-config.yaml:/mnt/config/promtail-config.yaml
      - /var/lib/docker/containers:/host/containers
    command: -config.file /mnt/config/promtail-config.yaml
    networks:
      - loki
    logging: *loki-logging

  grafana:
    image: grafana/grafana:9.2.4
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/provisioning/:/etc/grafana/provisioning/
    environment:
      GF_SECURITY_ADMIN_PASSWORD: testloki
    networks:
      - loki
    logging: *loki-logging

volumes:
  grafana-data:

networks:
  loki:
