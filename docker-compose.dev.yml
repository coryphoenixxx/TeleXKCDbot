services:

  api:
    container_name: app.api
    build:
      context: .
      dockerfile: build/Dockerfile
    environment:
      PYTHONPATH: .:./apps/backend/src
      CONFIG_PATH: /app/.configs/backend/config.toml
    volumes:
      - ./.configs/backend/config.toml:/app/.configs/backend/config.toml:ro
    command: poetry run api
    ports:
      - 8000:8000
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - backend
    healthcheck:
      test: curl -fsSL http://localhost:8000/api/healthcheck
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 10s

  tg_bot:
    container_name: app.tg_bot
    build:
      context: .
      dockerfile: build/Dockerfile
    environment:
      PYTHONPATH: .:./apps/backend/src
      CONFIG_PATH: /app/.configs/backend/config.toml
    volumes:
      - ./.configs/backend/config.toml:/app/.configs/backend/config.toml:ro
    command: poetry run tg_bot
    ports:
      - 5000:5000
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - backend


  postgres:
    container_name: app.postgres
    image: groonga/pgroonga:3.2.2-alpine-16-slim
#    command: -c config_file=/etc/postgresql.conf
    environment:
      POSTGRES_USER: "admin"
      POSTGRES_PASSWORD: "password"
      POSTGRES_DB: "appdb"
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
#      - ./.configs/postgresql.conf:/etc/postgresql.conf
      - pg-data:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U admin -d appdb
      interval: 5s
      timeout: 60s
      retries: 10
      start_period: 10s
    restart: unless-stopped
    networks:
      - backend

  migrations:
    container_name: app.migrations
    build:
      context: .
      dockerfile: build/Dockerfile
    environment:
      PYTHONPATH: .:./apps/backend/src
      CONFIG_PATH: /app/.configs/backend/config.toml
    volumes:
      - ./.configs/backend/config.toml:/app/.configs/backend/config.toml:ro
    command: poetry run alembic upgrade head
    depends_on:
      postgres:
        condition: service_healthy
    restart: on-failure
    networks:
      - backend


volumes:
  pg-data: {}

networks:
  backend:
    driver: bridge
    name: backend
